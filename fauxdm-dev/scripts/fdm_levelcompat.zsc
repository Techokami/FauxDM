/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie
 
 Purpose: LevelPostProcessor scripts and LevelCompatibility adjustments
 
 Comment: Some levels need a little extra KY Jelly to fit this mod inside of 'em

================================================================================
*/

// LevelPostProcessor scripts
class FDM_LevelPostProc : LevelPostProcessor
{
	protected void Apply(Name checksum, String mapname)
	{
		bool mapworks;
		
		if (!multiplayer)
		{
			// Check for a player 1 spawn point.
			for (int i = 0; i < 65535; i ++)
			{
				if (GetThingEdNum(i) == 1)
				{
					mapworks = true;
					break;
				}
			}
			
			// If one doesn't exist, add one. Otherwise the game'll error out.
			if (mapworks == false)
			{
				AddThing(1, level.PickDeathmatchStart(), 0, SKILLS_ALL, MODES_ALL);
				console.printf("FDM_Notice: No player 1 start! So one was added via script\nso the game doesn't error out. Slap your level designer around\nso they don't do this again, thanks!");
			}
		}
		
		// Delete certain items that are unneeded for this mod.
		for (int j = 0; j < 65535; j ++)
		{
			vector3 itemloc = GetThingPos(j);
			
			if (GetThingEdNum(j) == 5013) // Skulltag BFG10k
			{
				SetThingEdNum(j,  2006);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag BFG10k at %i x %i with BFG9000", itemloc.x, itemloc.y);
			}
			
			if (GetThingEdNum(j) == 5032) // TimeFreezeSphere
			{
				SetThingEdNum(j, 2013);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag TimeFreezeSphere at %i x %i with SoulSphere", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5035) // "BlurSphere" // InvisibilitySphere
			{
				SetThingEdNum(j, 2024);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag Invis Sphere at %i x %i with Blur Sphere", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5037) // Guardsphere
			{
				SetThingEdNum(j, 2019);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag Guardsphere at %i x %i with Blue Armor", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5039) // RandomPowerup
			{
				SetThingEdNum(j, 2013);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag RandomPowerup at %i x %i with SoulSphere", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5090) // MaxHealthBonus
			{
				SetThingEdNum(j, 2014);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag MaxHealthBonus at %i x %i with HealthBonus", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5091) //  MaxArmorBonus
			{
				SetThingEdNum(j, 2015);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag MaxArmorBonus at %i x %i with ArmorBonus", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5040) // RedArmor
			{
				SetThingEdNum(j, 2019);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Replaced Skulltag Red Armor at %i x %i with Blue Armor", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5080) // Team Spawn
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Team Spawn at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5081) // "FDM_Blank" // Team Spawn
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Team Spawn at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5100) // StrengthRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Strength Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5101) // "FDM_Blank" // RageRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Rage Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5102) // "FDM_Blank" // DrainRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Drain Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5103) // "FDM_Blank" // SpreadRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Spread Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5104) // "FDM_Blank" // ResistanceRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Resistance Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5105) // "FDM_Blank" // RegenerationRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Regen Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5106) // "FDM_Blank" // ProsperityRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Prosperity Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5107) // "FDM_Blank" // ReflectionRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Reflection Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5108) // "FDM_Blank" // HighJumpRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag High Jump Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5109) // "FDM_Blank" // HasteRune
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Haste Rune at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5057) // "FDM_Blank" // Hissy
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Hissy at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5058) // "FDM_Blank" // Impse
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Impse at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5020) // "FDM_Blank" // HellScorePillar
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Hell Score Pillar at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 10022) // "FDM_Blank" // HellScorePillarBlue
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Hell Score Pillar at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 10021) // "FDM_Blank" // HellScorePillarRed
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Hell Score Pillar at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5131) // "FDM_Blank" // RedFlagSpot
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Flag Spot at %i x %i", itemloc.x, itemloc.y);
			}

			if (GetThingEdNum(j) == 5130) // "FDM_Blank" // BlueFlagSpot
			{
				SetThingEdNum(j, 23);
				SetThingFlags(j,0);
				if (fdm_devspew == 1)
					Console.printf("FDM_Notice: Removed Skulltag Flag Spot at %i x %i", itemloc.x, itemloc.y);
			}
		}		
	}
}

// Alterations to existing IWAD maps
class FDM_LevelCompatibility : LevelCompatibility
{
	protected void Apply(Name checksum, String mapname)
	{
		/*
		// Old way of enabling multi-player only items in single player.
		// This mangles thing flags, a better solution needs to be found
		if (!multiplayer && fdm_mpweaps)
		{
			for (int i = 0; i < 65535; i ++)
			{
				SetThingFlags(i, 2016);
			}			 
		}
		*/
		
		// IWAD Map Tweaks
		switch (checksum)
		{			
			case 'none':
				return;
				
			case '058FB092EA1B70DA1E3CBF501C4A91A1': // Doom1 E1M8
			{
				// Disable Exit Teleporter-O-Death
				ClearLineSpecial(299);
				ClearLineSpecial(300);
				ClearLineSpecial(301);
				ClearLineSpecial(302);
				ClearLineSpecial(303);
				ClearLineSpecial(304);
				ClearLineSpecial(305);
				ClearLineSpecial(306);
				
				// Auto-Do The Exit Stairs
				ClearLineSpecial(233);
				OffsetSectorPlane(53, Sector.floor, 8);
				OffsetSectorPlane(54, Sector.floor, 16);
				OffsetSectorPlane(61, Sector.floor, 24);
				OffsetSectorPlane(62, Sector.floor, 32);
				OffsetSectorPlane(63, Sector.floor, 40);
				OffsetSectorPlane(64, Sector.floor, 48);
				OffsetSectorPlane(65, Sector.floor, 56);
				OffsetSectorPlane(55, Sector.floor, 64);
				OffsetSectorPlane(56, Sector.floor, 72);
				OffsetSectorPlane(57, Sector.floor, 80);
				OffsetSectorPlane(58, Sector.floor, 88);
				OffsetSectorPlane(59, Sector.floor, 96);
				OffsetSectorPlane(60, Sector.floor, 104);
				OffsetSectorPlane(67, Sector.floor, 112);
				SetWallTexture(233, Line.front, Side.bottom, "STONE3");
				
				// Place Something Fun on the Teleporter Exit Spot
				AddThing(2003, (448,5120,0), 0, SKILLS_ALL, MODES_ALL);
				
				// Open Baron Holes Automagically
				OffsetSectorPlane(45, Sector.ceiling, 86);
				OffsetSectorPlane(49, Sector.ceiling, 86);
				
				// Make Things A Bit More Interesting
				SetSectorSpecial(29, 768);
				SetSectorTexture(29, Sector.floor, "LAVA1");
				SetLineSpecial(169, Line_Horizon, 0, 0);
				SetLineSpecial(170, Line_Horizon, 0, 0);
				SetLineSpecial(171, Line_Horizon, 0, 0);
				break;
			}
			
			// Doom 2 Maps
			case '3C9902E376CCA1E9C3BE8763BDC21DF5': // DOOM2.WAD map01
			{
				// Open Rocket Door Automatically
				ClearLineSpecial(242);
				OffsetSectorPlane(58, Sector.ceiling, 128);
				
				// Open Outdoors Automatically
				OffsetSectorPlane(31, Sector.ceiling, 88);
				ClearLineSpecial(124);
				
				// Block Off Exit Door
				OffsetSectorPlane(32, Sector.ceiling, -72);
				
				// Change One Of The Imp Spawns Into A Player Spawn
				SetThingEdNum(49, 11);
				break;
			}
			
			case 'AB24AE6E2CB13CBDD04600A4D37F9189':   // Doom2 MAP02
			case '1EC0AF1E3985650F0C9000319C599D0C':  // Doom2 BFG Edition MAP02
			{
				// Raise Start Room Bars
				OffsetSectorPlane(40, Sector.ceiling, 72);
				OffsetSectorPlane(41, Sector.ceiling, 72);
				OffsetSectorPlane(42, Sector.ceiling, 72);
				OffsetSectorPlane(43, Sector.ceiling, 72);
				
				// Auto Lower Blockers, Block Off Switches
				OffsetSectorPlane(15, Sector.floor, -96);
				OffsetSectorPlane(16, Sector.floor, -96);
				OffsetSectorPlane(57, Sector.ceiling, -40);
				OffsetSectorPlane(63, Sector.ceiling, -40);
				
				// Open Up Loop
				OffsetSectorPlane(58, Sector.ceiling, 96);
				ClearLineSpecial(155);
				
				// Open Up Monster Lockers
				OffsetSectorPlane(91, Sector.ceiling, 64);
				OffsetSectorPlane(69, Sector.ceiling, 64);
				ClearLineSpecial(241);
				
				// Open Up Teleporter Bit
				OffsetSectorPlane(81, Sector.ceiling, 80);
				ClearLineSpecial(268);
				ClearLineSpecial(293);
				
				// Block Off Exit Door
				ClearLineSpecial(350);
				OffsetSectorPlane(20, Sector.ceiling, -88);
				SetWallTexture(342, Line.front, Side.top, "STONE4");
				
				break;
			}
				
			case '291F24417FB3DD411339AE82EF9B3597': // Doom2 MAP07
			{
				// Auto-lower the start room walls to avoid grief
				OffsetSectorPlane(19, Sector.floor, -80);
				ClearLineSpecial(162);
				
				// Open up the BFG room
				OffsetSectorPlane(25, Sector.ceiling, 112);
				ClearLineSpecial(169);
				break;
			}
			
			case 'AA4CA3FC891D13821ACCABD836E29EB5': // DOOM2.WAD map32
			{
				// Disable Boss Door
				ClearLineSpecial(168);
				SetWallTexture(158, Line.front, Side.top, "ZZLOCK");
				break;
			}
		}
	}
}