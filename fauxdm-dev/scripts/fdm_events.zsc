/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie (see comment)
 
 Purpose: Event Handlers
 
 Comment: While I smushed this all together, Gutawer, Phantombeta,
          Jekyll Grim Payne, Zombie and Kodi all deserve credit for
		  babying my dumb ass through all of this at one point or another.

================================================================================
*/

Class FDM_DMPlayerSpawnHandler : EventHandler
{				
	override void PlayerEntered(PlayerEvent e)
	{
		Vector3 checkpos = level.PickDeathmatchStart();
		
		// Means there is no deathmatch starts.
		if (checkpos ~== (0,0,0))
		{
			if (!multiplayer && !deathmatch && fdm_devspew == 1)
				Console.printf("FDM_Error: No deathmatch starts found when player entering game!");
			return;
		}
		
		if (!multiplayer && !deathmatch)
		{
			Vector3 dest;
			int destAngle;
			[dest, destAngle] = level.PickDeathmatchStart();
				
			PlayerInfo player = players[e.PlayerNumber];
			if (player.mo != null)
			{
				player.mo.setOrigin(dest, false);
				dest.z = player.mo.curSector.floorplane.ZatPoint(dest.XY);
				player.mo.setOrigin(dest, false);

				player.mo.angle = destAngle;
				player.mo.giveinventory("RedCard",1);
				player.mo.giveinventory("RedSkull",1);
				player.mo.giveinventory("BlueCard",1);
				player.mo.giveinventory("BlueSkull",1);
				player.mo.giveinventory("YellowCard",1);
				player.mo.giveinventory("YellowSkull",1);
				Actor.Spawn("FDM_ActorSpawnFog", dest);
			} else {
				Console.printf("FDM_Error: No player 1 start! (Yes, we still need one in the\nmap, otherwise the engine refuses to start the game. Like it's\njust about to do. Sorry, we can't work around this! You'll\nneed to manually add a Player 1 Start in the level editor.)");
			}
		}
	}
	
	override void PlayerRespawned(PlayerEvent e)
	{
		Vector3 checkpos = level.PickDeathmatchStart();
		
		// Means there is no deathmatch starts.
		if (checkpos ~== (0,0,0))
		{
			if (!multiplayer && !deathmatch && fdm_devspew == 1)
				Console.printf("FDM_Error: No deathmatch starts found when player respawning!");
			return;
		}
		
		if (!multiplayer && !deathmatch)
		{
			Vector3 dest;
			int destAngle;
			[dest, destAngle] = level.PickDeathmatchStart();
				
			PlayerInfo player = players[e.PlayerNumber];
			if (player.mo != null)
			{
				player.mo.setOrigin(dest, false);
				dest.z = player.mo.curSector.floorplane.ZatPoint(dest.XY);
				player.mo.setOrigin(dest, false);

				player.mo.angle = destAngle;
				player.mo.giveinventory("RedCard",1);
				player.mo.giveinventory("RedSkull",1);
				player.mo.giveinventory("BlueCard",1);
				player.mo.giveinventory("BlueSkull",1);
				player.mo.giveinventory("YellowCard",1);
				player.mo.giveinventory("YellowSkull",1);
				Actor.Spawn("FDM_ActorSpawnFog", dest);
			}
		}
	}
}


Class FDM_DMSpawnHandler : EventHandler
{
	Array<Actor> Things;
	
	override void WorldLoaded(WorldEvent e)
	{
		Things.Clear();
		
		// are we in single player? and are we re-entering a hub level?
		if (!multiplayer && !deathmatch && e.IsReopen == false)
		{
			for (int j = 0; j < 100; j++)
			{
				Vector3 checkpos = level.PickDeathmatchStart();
				
				// Means there is no deathmatch starts.
				if (checkpos ~== (0,0,0) && fdm_devspew == 1)
				{
					Console.printf("FDM_Error: No deathmatch starts found when placing monster spawners!");
					return;
				}
				
				if (Things.Size() > 0)
				{
					bool cont = false;
					for (int i = 0; i < Things.Size(); i++)
					{
						if (Things[i].pos == checkpos)
						{
							cont = true;
							break;
						}
					}
					if (cont) continue;
				}
				// spawn a little sumptin'-sumptin'
				if (!(level.nomonsters || sv_nomonsters))
				{
					Actor n = Actor.Spawn("FDM_Spawner", checkpos);
					if (n) Things.Push(n);
				} else {
					Console.printf("Monsters are disabled. Game mode disabled.");
					return;
				}
			}
		}
	}
}

class FDM_SP_ItemRespawner : EventHandler
{
	override void WorldThingSpawned(Worldevent e)
	{
		if (!multiplayer && !deathmatch)
		{
			if ((e.thing is "Inventory" || e.thing is "Weapon") && !(e.thing is "FDM_Timesphere")) // an exception must be made...
			{
					Inventory(e.thing).bALWAYSRESPAWN = true;
			}
		}
	}
}

Class FDM_MonsterRemover : EventHandler
{	
	override void WorldLoaded(WorldEvent e)
	{
		BlockThingsIterator it = BlockThingsIterator.CreateFromPos(0,0,0,0,32767,0);
        while (it.Next())
        {
            Actor mo = it.thing;
            // only consider monster-tagged things:
			
			if (mo is "Key")
			{
				mo.A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
			}
			
            if (mo.bIsMonster)
            {
                if (mo is "Fatso" || mo is "Arachnotron" || mo is "BaronOfHell")
				{
					
				} else {				
					mo.A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
				}
            }
        }
	}
}

class FDM_HolidayShit : EventHandler
{
	override void WorldTick()
	{
		if (level.nextmap ~== "D5M1" && fdm_holiday == 1)
		{
			level.nextmap = "D5M1X";
		} else if (level.nextmap ~== "D5M1X" && fdm_holiday == 0) {
			level.nextmap = "D5M1";
		}
	}
	
	override void CheckReplacement(ReplaceEvent e)
	{
		if (e.replacee == "FDM_DukeBot")
		{
			if (fdm_holiday == 1)
			{
				int cointoss;
				cointoss = random(0,1);
				
				if (cointoss == 1)
				{
					e.Replacement = "FDM_Santa";
				}
			}
		}
	}
}

class FDM_ContextualReplacements : EventHandler
{
    override void CheckReplacement(ReplaceEvent e)
	{
		if (e.replacee == "FDM_TimeSphere")
		{
			if (multiplayer | deathmatch | sv_nomonsters)
			{
				e.Replacement = "FDM_HasteSphere";
			}
		}
	}
}

// ZScript extensions for the ACS script.
class FDM_ACSCrap : Actor
{
    // Upon the player winning, tell the monsters that there is no hope left in
	// this world and they should just give up.
	static void GiveUpLittleHomie()
    {
        // BlockThingsIterator code taken from Duke3D Sprite Shadows by
		// Nash Muhandes. https://forum.zdoom.org/viewtopic.php?f=105&t=54992
		PlayerInfo p = players[consoleplayer];
        
		BlockThingsIterator it = BlockThingsIterator.CreateFromPos(0,0,0,0,32767,0);
        while (it.Next())
        {
            Actor mo = it.thing;
            // only consider monster-tagged things:
			
            if (mo.bIsMonster)
            {
                //mo.A_Die();
                mo.A_GiveInventory("FDM_MonsterGiveUp", 1);
            }
        }
		
		ThinkerIterator bit = ThinkerIterator.Create("FDM_Spawner");
		Actor fo;
		while (fo = FDM_Spawner(bit.Next()))
		{
			fo.SetStateLabel("Null");
		}
    }
}