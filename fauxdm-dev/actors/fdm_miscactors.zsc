/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie
 
 Purpose: Misc. actors for whatever purpose
 
 Comment: 

================================================================================
*/

// Make the BossBrain invulnerable and have Bossbrain cubes explode upon reaching
// their destination instead of spawning monsters that no longer exist.
class FDM_BossBrain : BossBrain replaces BossBrain
{
	Default
	{
		Health 99999;
		+NODAMAGE
	}
}

class FDM_BossEye : BossEye replaces BossEye
{
	Default
	{
		DropItem "FDM_SpawnShotExplosion";
	}
	
	States
	{
	Spawn:
		SSWV A 10 A_Look;
		Loop;
	See:
		SSWV A 181 A_BrainAwake;
		SSWV A 150 A_NewBrainSpit;
		Wait;
	}
	
	// Modify the BrainSpit command to make the launch sound not be globally
	// played while still being fairly audible.
	void A_NewBrainSpit(class<Actor> spawntype = null)
	{
		SpotState spstate = Level.GetSpotState();
		Actor targ;
		Actor spit;
		bool isdefault = false;

		// shoot a cube at current target
		targ = spstate.GetNextInList("BossTarget", G_SkillPropertyInt(SKILLP_EasyBossBrain));

		if (targ)
		{
			if (spawntype == null) 
			{
				spawntype = "SpawnShot";
				isdefault = true;
			}

			// spawn brain missile
			spit = SpawnMissile (targ, spawntype);

			if (spit)
			{
				// Boss cubes should move freely to their destination so it's
				// probably best to disable all collision detection for them.
				spit.bNoInteraction = spit.bNoClip;
		
				spit.target = targ;
				spit.master = self;
				// [RH] Do this correctly for any trajectory. Doom would divide by 0
				// if the target had the same y coordinate as the spitter.
				if (spit.Vel.xy == (0, 0))
				{
					spit.special2 = 0;
				}
				else if (abs(spit.Vel.y) > abs(spit.Vel.x))
				{
					spit.special2 = int((targ.pos.y - pos.y) / spit.Vel.y);
				}
				else
				{
					spit.special2 = int((targ.pos.x - pos.x) / spit.Vel.x);
				}
				// [GZ] Calculates when the projectile will have reached destination
				spit.special2 += level.maptime;
				spit.bBossCube = true;
			}

			if (!isdefault)
			{
				A_PlaySound(self.AttackSound, CHAN_WEAPON, 1.0, 0, 0.5);
			}
			else
			{
				// compatibility fallback
				A_PlaySound("brain/spit", CHAN_WEAPON, 1.0, 0, 0.5);
			}
		}
	}
}

class FDM_SpawnShot : SpawnShot replaces SpawnShot
{
	Default
	{
		+ROCKETTRAIL
		//SeeSound "brain/spit";
		DeathSound "";
	}
	States
	{
	Spawn:
		BOSF A 3 BRIGHT
		{
			A_PlaySound("brain/cube");
			A_SpawnFly("FDM_Blank");
		}
		BOSF BCD 3 BRIGHT A_SpawnFly("FDM_Blank");
		Loop;
	}
}

class FDM_SpawnShotExplosion : Actor
{
	Default
	{
	+NOCLIP
	+FORCEXYBILLBOARD 
	Projectile;
	Speed 0;
	RenderStyle "Add";
	Obituary "$OB_ICON";
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 
		{
			A_Quake (1,24,0,750,0);
			A_playSound("actors/cultist/explosion",CHAN_WEAPON);
			A_Explode();
		}
		BEXP ABCDEFGHIJKLM 2 Bright;
		Stop;
	}
	
	override String GetObituary(Actor victim, Actor inflictor, Name mod, bool playerattack)
	{
		return "$OB_ICON";
	}
}

// Barrels
class FDM_ExplosiveBarrel : Actor replaces ExplosiveBarrel
{
	Default
	{
		Health 20;
		Radius 10;
		Height 42;
		+SOLID
		+SHOOTABLE
		+NOBLOOD
		+ACTIVATEMCROSS
		+DONTGIB
		+NOICEDEATH
		+OLDRADIUSDMG
		Obituary "$OB_BARREL";
	}
	States
	{
	Spawn:
		BAR1 AB 6;
		Loop;
	Death:
		BAR1 A 5 BRIGHT;
		TNT1 A 0 
		{
			A_Explode();
			A_SpawnItem("FDM_ExplosiveBarrelExplosionVisualOnly");
		}
		TNT1 A 1050 BRIGHT;
		TNT1 A 5 A_Respawn;
		Wait;
	}
}


// Skulltag Springpads
class FDM_SpringPadZone : SectorAction
{
	Default
	{
		Health SECSPAC_HitFloor;
		//$Category "FauxDM Skulltag Compat"
		//$Title "Spring Pad Zone"
		//$NotAngled
		//$Color 13
		//$Sprite "internal:Zone"
	}
	
	override bool TriggerAction (Actor triggerer, int activationType)
	{
		if ((activationType & health) && CanTrigger(triggerer))
		{
			triggerer.A_PlaySound("world/jumppad");
			triggerer.vel.z = 16;
			//return triggerer.A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
		}
		return false;
	}

	override bool CanTrigger (Actor triggerer)
	{
		/*
		return special &&
			((triggerer.player && !bFriendly) ||
			(bAmbush && triggerer.bActivateMCross) ||
			(bDormant && triggerer.bActivatePCross));
		*/
		
		if (triggerer is "PlayerPawn" || triggerer is "FDM_BaseMonster")
			return true;
		else
			return false;
	}
}