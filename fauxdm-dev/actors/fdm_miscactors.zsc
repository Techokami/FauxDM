/*
================================================================================
 FauxDM ZScript Code
 
 Author: The Kinsie
 
 Purpose: Misc. actors for whatever purpose
 
 Comment: 

================================================================================
*/

// Barrels
class FDM_ExplosiveBarrel : Actor replaces ExplosiveBarrel
{
	Default
	{
		Health 20;
		Radius 10;
		Height 42;
		PainChance 256;
		+SOLID
		+SHOOTABLE
		+NOBLOODDECALS
		+ACTIVATEMCROSS
		+DONTGIB
		+NOICEDEATH
		+OLDRADIUSDMG
		Obituary "$OB_BARREL";
		bloodtype "FDM_MetalImpact";
	}
	States
	{
	Spawn:
		BAR1 AB 6;
		Loop;
	Pain:
		BAR1 C 8;
		goto Spawn;
	Death:
		BAR1 C 15 BRIGHT;
		TNT1 A 0 
		{
			A_Explode();
			A_SpawnItem("FDM_ExplosiveBarrelExplosionVisualOnly");
			
			for (int i; i < 8; i++)
			{
				A_SpawnProjectile("FDM_Debris",random(16,42),random(-8,8),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			}
		}
		TNT1 A 1050 BRIGHT;
		TNT1 A 5 A_Respawn;
		Wait;
	}
}

// Reelism Explosive Cars
class FDM_Car : Actor
{
	Default
	{
		obituary "%o was hit by a parked car.";
		health 300;
		radius 48;
		height 56;
		mass 10000;
		+SOLID
		+SHOOTABLE
		+DONTGIB
		+NOICEDEATH
		+CANPASS
		+NOBLOODDECALS
		+DONTTHRUST
		bloodtype "FDM_MetalImpact";
		//$Category "FauxDM Props"
		//$Title "Reelism Car"
		//$Color 11
	}
	
	int timeout;
	
	states
	{
	Spawn:
		CARZ A -1;
		Stop;
	Death:
		CARZ A 0 
		{
			//Radius_Quake(10,60,0,120,0);
			A_Explode(150,192);
			ThrustThingZ(0,64,0,1);
			for (int i; i < 22; i++)
			{
				A_SpawnProjectile("FDM_Debris",random(32,56),random(-32,32),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			}
			A_SpawnItem("FDM_CarExplosionVisualOnly");
		}
	SmashUp:
		CARZ A 0; 
		CARZ A 2 
		{
			//A_SetTranslation("Scorched");
			A_SpawnItemEx("FDM_ExplosiveBarrelExplosionVisualOnly",random(0,30),random(0,30),random(0,30),0,0,0,random(0,360));
			A_Explode(150);
			A_Quake(6,8,0,2048,"nosound");
			
			for (int i; i < 3; i++)
			{
				A_SpawnProjectile("FDM_FlamethrowerProjectile",32,0,random(0,360),CMF_ABSOLUTEANGLE|CMF_ABSOLUTEANGLE|CMF_ABSOLUTEPITCH,random(32,45));
			}
			
			if (vel.z == 0)
			{
				timeout++;
			}
		}
		CARZ AAAAAA 1 A_JumpIf(pos.z == floorz,"SmashUpEnd");
		CARZ A 0 A_JumpIf(timeout > 8,"SmashUpEnd");
		loop;
	SmashUpEnd:
		CARZ A 0 
		{
			A_Explode(150);
			for (int i; i < 22; i++)
			{
				A_SpawnProjectile("FDM_Debris",random(32,56),random(-32,32),random(0,360),CMF_ABSOLUTEPITCH,random(-30,-50));
			}
			A_SpawnItemEx("FDM_ExplosiveBarrelExplosionVisualOnly",random(0,30),random(0,30),random(0,30),0,0,0,random(0,360));
			A_SpawnItemEx("FDM_FireAOE",-64,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",64,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",-64,-64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",0,-64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",64,-64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",-64,64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",0,64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("FDM_FireAOE",64,64,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		}
		TNT1 A 1050;
		TNT1 A 5 A_Respawn(RSF_FOG);
		Wait;
	}
	
	override void PostBeginPlay ()
	{
		int carcolor;
		carcolor = random (0,4);
				
		if (carcolor == 1)
		{
			A_SetTranslation("Car1");
		} else if (carcolor == 2)
		{
			A_SetTranslation("Car2");
		} else if (carcolor == 3)
		{
			A_SetTranslation("Car3");
		} else if (carcolor == 4)
		{
			A_SetTranslation("Car4");
		}
		
		Super.PostBeginPlay ();
	}
}

// Skulltag Springpads
class FDM_SpringPadZone : SectorAction
{
	Default
	{
		Health SECSPAC_HitFloor;
		//$Category "FauxDM Skulltag Compat"
		//$Title "Spring Pad Zone"
		//$NotAngled
		//$Color 13
		//$Sprite "internal:Zone"
	}
	
	override bool TriggerAction (Actor triggerer, int activationType)
	{
		if ((activationType & health) && CanTrigger(triggerer))
		{
			triggerer.A_PlaySound("world/jumppad");
			triggerer.vel.z = 16;
			//return triggerer.A_CallSpecial(special, args[0], args[1], args[2], args[3], args[4]);
		}
		return false;
	}

	override bool CanTrigger (Actor triggerer)
	{
		/*
		return special &&
			((triggerer.player && !bFriendly) ||
			(bAmbush && triggerer.bActivateMCross) ||
			(bDormant && triggerer.bActivatePCross));
		*/
		
		if (triggerer is "PlayerPawn" || triggerer is "FDM_BaseMonster")
			return true;
		else
			return false;
	}
}